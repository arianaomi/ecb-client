[{"/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/index.tsx":"1","/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/App.tsx":"2","/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/lib/api.js":"3","/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/screens/Home/index.tsx":"4","/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/components/Card.tsx":"5","/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/components/Navbar.tsx":"6","/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/screens/Form/index.tsx":"7","/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/components/FormCar.tsx":"8"},{"size":222,"mtime":1610868444512,"results":"9","hashOfConfig":"10"},{"size":516,"mtime":1610956807224,"results":"11","hashOfConfig":"10"},{"size":634,"mtime":1610966277034,"results":"12","hashOfConfig":"10"},{"size":1196,"mtime":1610962955485,"results":"13","hashOfConfig":"10"},{"size":3113,"mtime":1610962379810,"results":"14","hashOfConfig":"10"},{"size":512,"mtime":1610982748289,"results":"15","hashOfConfig":"10"},{"size":818,"mtime":1610953504830,"results":"16","hashOfConfig":"10"},{"size":2958,"mtime":1610960295657,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"mq1veg",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/index.tsx",[],["38","39"],"/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/App.tsx",[],"/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/lib/api.js",[],["40","41"],"/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/screens/Home/index.tsx",[],"/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/components/Card.tsx",["42"],"\nimport {useState} from 'react'\nimport { useForm } from \"react-hook-form\";\nimport classNames from 'classnames'\nimport {updateCar} from '../lib/api'\n\ninterface Inputs {\n  estimateDeliveryDate: string\n  personName: string\n}\n\nexport interface Props {\n  description: string\n  make: string\n  model: string\n  estimateDate: string\n  id: string\n  image: string,\n  km: string\n  estimateDeliveryDate?: string\n  personName?: string\n  _id: string\n}\n\nexport default function Card ({\n  _id, \n  description,\n  make,\n  model,\n  estimateDate,\n  image = '',\n  id,\n  km,\n  estimateDeliveryDate,\n  personName\n} : Props) {\n\n  const [isUnderMaintenance, setIsUnderMaintenance] = useState(false)\n  const [showForm, setShowForm] = useState (false)\n\n  const { register, handleSubmit, errors } = useForm<Inputs>();\n\n  const onSubmit = async (data: object) => {\n    try {\n      const response = await updateCar(_id, data)\n      if(response){\n        setShowForm(false)\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const handleClick = () => {\n    setIsUnderMaintenance(!isUnderMaintenance)\n    setShowForm(true)\n    if(isUnderMaintenance){\n      setShowForm(false)\n    }\n  }\n\n  const cardClass = classNames({\n    'card-car': description,\n    'card-active': isUnderMaintenance\n  })\n\n  return (\n    <div className={cardClass} >\n      <img\n        src={image}\n        alt='car'\n        className='img-card'\n      />\n      <h1>{make}</h1>\n      <h2>{model}</h2>\n      <p> Descripci√≥n: <span>{description}</span></p>\n      <p>Km: <span>{km}</span> </p>\n      <p>Id: <span>{id}</span> </p>\n      <p>Fecha programada: <span>{estimateDate}</span> </p>\n\n      { estimateDeliveryDate &&\n        <p>Fecha estimada de entrega: \n          <span>\n            {estimateDeliveryDate}\n          </span> \n        </p>\n      }\n      { personName && \n        <p>Encargado:\n           <span>\n             {personName}\n          </span>\n        </p>\n      }\n\n      {showForm &&\n       <form \n          onSubmit={handleSubmit(onSubmit)} \n          className='form-card'\n        >\n        <label className='label'> \n          Fecha Estimada de entrega \n        </label>\n        <input \n          name=\"estimateDeliveryDate\"\n          ref={register({ required: true })} \n          type='date' \n          className='input'\n        />\n        { errors.estimateDeliveryDate && \n          <span className='error'>\n            Este campo es necesario\n          </span>}\n        <label className='label'>\n          Persona encargada\n        </label>\n        <input\n          name=\"personName\" \n          ref={register({ required: true })}   \n          className='input'\n        />\n        { errors.personName && \n          <span className='error'>\n            Este campo es necesario\n          </span>\n        }\n        <input \n          type=\"submit\"\n          value='Guardar' \n          className='btn'/>\n       </form>\n      }\n      <a \n        onClick={handleClick}\n        className='btn-card'\n      >\n        { isUnderMaintenance\n          ? 'Quitar mantenimiento' \n          :' Agregar a mantenimiento'\n        }\n      </a>\n    </div>\n  )\n}\n",["43","44"],"/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/components/Navbar.tsx",[],"/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/screens/Form/index.tsx",[],"/Users/naomi/Documents/Wiki-Web/Front-end/React/technical-evaluation-ECB/ecb-client/src/components/FormCar.tsx",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":133,"column":7,"nodeType":"51","endLine":136,"endColumn":8},{"ruleId":"45","replacedBy":"52"},{"ruleId":"47","replacedBy":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["54"],["55"],"no-global-assign","no-unsafe-negation"]